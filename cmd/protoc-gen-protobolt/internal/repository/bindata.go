// Code generated by go-bindata. DO NOT EDIT.
//  memcopy: true
//  compress: true
//  decompress: once
//  asset-dir: true
//  restore: true
// sources:
//  template.tmpl

package repository

import (
	"bytes"
	"compress/flate"
	"io"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"

	"github.com/tmthrgd/go-bindata/restore"
)

type asset struct {
	name string
	data string
	size int64

	once  sync.Once
	bytes []byte
	err   error
}

func (a *asset) Name() string {
	return a.name
}

func (a *asset) Size() int64 {
	return a.size
}

func (a *asset) Mode() os.FileMode {
	return 0
}

func (a *asset) ModTime() time.Time {
	return time.Time{}
}

func (*asset) IsDir() bool {
	return false
}

func (*asset) Sys() interface{} {
	return nil
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]*asset{
	"template.tmpl": &asset{
		name: "template.tmpl",
		data: "" +
			"\x5c\x51\xc1\x8a\xdb\x30\x10\x3d\x4b\x5f\xf1\xf0\x29\x2e\x5d\xf9\x5e\xc8\xa5\xdd\xa4\x6c\x97\xee" +
			"\x06\x9a\xdb\xb2\x14\xc5\x1e\xbb\x22\x96\x64\xa4\x71\x20\x18\xfd\x7b\x91\x9c\xb4\xb0\x17\x69\xe6" +
			"\xcd\x7b\x33\xa3\xa7\xa6\xc1\x37\xdf\x11\x06\x72\x14\x34\x53\x87\xd3\x15\x53\xf0\xec\xdb\x87\x81" +
			"\xdc\x43\x09\x4f\x7e\x64\x85\xc7\x57\xbc\xbc\x1e\xb1\x7b\x7c\x3a\x2a\xd9\x34\x88\x7e\x0e\x2d\x7d" +
			"\xc1\xb2\x40\xed\xcd\x48\xea\x45\x5b\x42\x4a\x72\xd2\xed\x59\x0f\x94\x0b\xf7\xb0\x10\x72\x4d\x1a" +
			"\x3b\xf9\xc0\xd8\x48\x51\x45\x0e\xad\x77\x97\x6a\x0d\x8d\x1b\x62\x25\x6b\x99\x5b\xef\x5c\x9c\x03" +
			"\x81\xff\x10\x6e\x7c\x13\x31\x47\xea\x94\xbc\xe8\x80\xdf\xd8\xe2\x26\x56\x7b\x1f\xac\xe6\x27\xc7" +
			"\x52\x2e\x0b\x82\x76\x79\xda\xce\xb1\x61\x43\x31\x4f\x14\x4d\x83\xef\xc4\x87\xfc\x90\xaf\x7e\xe4" +
			"\xc3\x33\x02\xf1\x1c\x5c\x2c\xfd\xa7\x60\xac\x0e\x57\x9c\xe9\x8a\xd6\xdb\xc9\x47\xea\x8a\xa6\x0f" +
			"\xde\x16\x46\x6f\x68\xec\x22\xac\x0e\x67\xea\xa0\x57\xd9\x89\x8c\x1b\x30\xe9\xc0\xf0\x3d\x0c\x2b" +
			"\x29\xfa\xd9\xb5\xd8\x58\x7c\xca\x86\xfc\x8c\xc3\xdd\x8f\xfa\xc3\xf8\x4d\x8d\xb7\xf7\xd3\x95\x09" +
			"\x8b\x14\xc2\xf4\xb0\xd8\x6e\xe1\xcc\x58\x72\xb1\x2e\x97\x73\x29\x44\x92\xff\x80\x55\xb3\xc9\x94" +
			"\x9b\x5b\xea\x87\x37\xae\x00\xe2\xed\x7d\xc5\x4a\x07\x21\xfe\x3b\x71\x78\xde\xaf\xeb\xa7\x94\xbf" +
			"\xe3\x5c\xb2\xa3\xff\x55\xd8\x50\x48\xe9\xf3\x5d\x42\xae\xcb\x76\x09\x21\x6e\x58\x55\x95\xbb\xce" +
			"\x67\x2d\x45\xca\x06\x93\xeb\xb2\xa9\x7f\x03\x00\x00\xff\xff",
		size: 567,
	},
}

// AssetAndInfo loads and returns the asset and asset info for the
// given name. It returns an error if the asset could not be found
// or could not be loaded.
func AssetAndInfo(name string) ([]byte, os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	a.once.Do(func() {
		fr := flate.NewReader(strings.NewReader(a.data))

		var buf bytes.Buffer
		if _, a.err = io.Copy(&buf, fr); a.err != nil {
			return
		}

		if a.err = fr.Close(); a.err == nil {
			a.bytes = buf.Bytes()
		}
	})
	if a.err != nil {
		return nil, nil, &os.PathError{Op: "read", Path: name, Err: a.err}
	}

	return a.bytes, a, nil
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	a, ok := _bindata[filepath.ToSlash(name)]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	data, _, err := AssetAndInfo(name)
	return data, err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}

	return names
}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	return restore.Asset(dir, name, AssetAndInfo)
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	return restore.Assets(dir, name, AssetDir, AssetAndInfo)
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree

	if name != "" {
		var ok bool
		for _, p := range strings.Split(filepath.ToSlash(name), "/") {
			if node, ok = node[p]; !ok {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}

	if len(node) == 0 {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}

	rv := make([]string, 0, len(node))
	for name := range node {
		rv = append(rv, name)
	}

	return rv, nil
}

type bintree map[string]bintree

var _bintree = bintree{
	"template.tmpl": bintree{},
}
